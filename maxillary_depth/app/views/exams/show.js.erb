function createTextCanvas(text, color, font, size) {
        size = size || 16;
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        var fontStr = (size + 'px ') + (font || 'Arial');
        ctx.font = fontStr;
        var w = ctx.measureText(text).width;
        var h = Math.ceil(size);
        canvas.width = w;
        canvas.height = h;
        ctx.font = fontStr;
        ctx.fillStyle = color || 'black';
        ctx.fillText(text, 0, Math.ceil(size * 0.8));
        return canvas;
}

function createText2D(text, color, font, size, segW, segH) {
        var canvas = createTextCanvas(text, color, font, size);
        var plane = new THREE.PlaneGeometry(canvas.width, canvas.height, segW, segH);
        var tex = new THREE.Texture(canvas);
        tex.needsUpdate = true;
        var planeMat = new THREE.MeshBasicMaterial({
            map: tex,
            color: 0xffffff,
            transparent: true
        });
        
        var mesh = new THREE.Mesh(plane, planeMat);
        mesh.scale.set(0.5, 0.5, 0.5);
        mesh.doubleSided = true;
        return mesh;
}

$( document ).ready(function(){       
    
    $("div.patient_exam").html("<%= escape_javascript(render partial: 'exams/exam', locals: { exam: @exam } ) %>");


    

    var renderer = new THREE.WebGLRenderer({
        antialias: true
    });

    var w = 960;
    var h = 500;
    renderer.setSize(w, h);
    $("div.patient_exam").append(renderer.domElement);
    

    renderer.setClearColor(0xEEEEEE, 1.0);

    var camera = new THREE.PerspectiveCamera(45, w / h, 1, 10000);
    camera.position.z = 200;
    camera.position.x = -100;
    camera.position.y = 100;

    var scene = new THREE.Scene();
    var controls = new THREE.TrackballControls(camera, renderer.domElement);
	controls.rotateSpeed = 1.0;
	controls.zoomSpeed = 1.2;
	controls.panSpeed = 0.8;
	controls.noZoom = false;
	controls.noPan = false;
	controls.staticMoving = true;
	controls.dynamicDampingFactor = 0.3;
	controls.keys = [ 65, 83, 68 ];
	controls.addEventListener( 'change', render );

    var scatterPlot = new THREE.Object3D();
    scene.add(scatterPlot);

    scatterPlot.rotation.y = 0;

    var point_n = { x: point_n_x, y: point_n_y, z: 0 };
    var point_a = { x: point_a_x, y: point_a_y, z: 0 };
    var point_po = { x: point_po_x, y: point_po_y, z: 0 };
    var point_or = { x: point_or_x, y: point_or_y, z: 0 };

    var lista_pontos = [];
    lista_pontos[0] = point_n;
    lista_pontos[1] = point_a;
    lista_pontos[2] = point_po;
    lista_pontos[3] = point_or; 

    var format = d3.format("+.3f");
    

    var xExent = d3.extent(lista_pontos, function (d) {return d.x; }),
        yExent = d3.extent(lista_pontos, function (d) {return d.y; }),
        zExent = d3.extent(lista_pontos, function (d) {return d.z; });

    var vpts = {
        xCen: (xExent[1] + xExent[0]) / 2,
        yCen: (yExent[1] + yExent[0]) / 2
    }

    

    var xScale = d3.scaleLinear()
                  .domain(xExent)
                  .range([-100, 100]);
    var yScale = d3.scaleLinear()
                  .domain(yExent)
                  .range([-100, 100]);                  

    var lineGeo = new THREE.Geometry();

    lineGeo.vertices.push(
        new THREE.Vector3(-100, yScale(vpts.yCen), 0), 
        new THREE.Vector3(100, yScale(vpts.yCen), 0),        
        new THREE.Vector3(xScale(vpts.xCen), -100, 0),
        new THREE.Vector3(xScale(vpts.xCen), 100, 0)

   );
    var lineMat = new THREE.LineBasicMaterial({
        color: 0x000000,
        lineWidth: 1
    });
    var line = new THREE.LineSegments(lineGeo, lineMat);
    line.type = THREE.Lines;
    scatterPlot.add(line);

    // Add titles
    var titleX = createText2D('X');
    titleX.position.x = 100;
    titleX.position.y = 5;
    scatterPlot.add(titleX);

    var titleX = createText2D('-X');
    titleX.position.x = -100,
    titleX.position.y = 5;
    scatterPlot.add(titleX);

    var titleY = createText2D('Y');
    titleY.position.y = 100;
    scatterPlot.add(titleY);

    var titleY = createText2D('-Y');
    titleY.position.y = -100;
    scatterPlot.add(titleY);

    var valueX = createText2D('Point_N');
    valueX.position.x = point_n.x,
    valueX.position.y = point_n.y;
    scatterPlot.add(valueX);

    //var valueX = createText2D(format(point_n_x) + ',' + format(point_n_y));
    //valueX.position.y = (point_n.y) +20;
    //scatterPlot.add(valueX);


    var valueX = createText2D('Point_A');
    valueX.position.x = point_a.x,
    valueX.position.y = point_a.y;
    scatterPlot.add(valueX);


    var valueY = createText2D('Point_PO');
    valueY.position.x = point_po.x,
    valueY.position.y = point_po.y;
    scatterPlot.add(valueY);

    var valueY = createText2D('Point_OR');
    valueY.position.x = point_or.x,
    valueY.position.y = point_or.y;
    scatterPlot.add(valueY);


    var mat = new THREE.ParticleBasicMaterial({
        vertexColors: true,
        size: 10
    });

    var pointGeo = new THREE.Geometry();
    

    pointGeo.vertices.push( 
        new THREE.Vector3(point_n_x, point_n_y, 0),
        new THREE.Vector3(point_a_x, point_a_y, 0),
        new THREE.Vector3(point_po_x, point_po_y, 0),
        new THREE.Vector3(point_or_x, point_or_y, 0),
    );

    var axisMat = new THREE.LineBasicMaterial({
        color: 0x0000FF,
        lineWidth: 1
    });
    var axis1 = new THREE.LineSegments(pointGeo, axisMat);
    //axis1.type = THREE.Lines;
    scatterPlot.add(axis1);

    var points = new THREE.ParticleSystem(pointGeo, mat);    
    console.log(points)
    scatterPlot.add(points);


    renderer.render(scene, camera);
    var paused = false;
    var last = new Date().getTime();
    var down = false;
    var sx = 0,
        sy = 0;
        
    window.onmousedown = function(ev) {
        down = true;
        sx = ev.clientX;
        sy = ev.clientY;
    };
    window.onmouseup = function() {
        down = false;
    };
    window.onmousemove = function(ev) {
        if (down) {
            var dx = ev.clientX - sx;
            var dy = ev.clientY - sy;
            scatterPlot.rotation.y += dx * 0.01;
            camera.position.y += dy;
            sx += dx;
            sy += dy;
        }
    }
    var animating = false;
    window.ondblclick = function() {
        animating = !animating;
    };

    function animate(t) {
        if (!paused) {
            last = t;
            if (animating) {
                var v = pointGeo.vertices;
                for (var i = 0; i < v.length; i++) {
                    var u = v[i];
                    //console.log(u)
                    u.angle += u.speed * 0.01;
                    u.x = Math.cos(u.angle) * u.radius;
                    u.z = Math.sin(u.angle) * u.radius;
                }
                pointGeo.__dirtyVertices = true;
            }
            renderer.clear();
            controls.update();
            camera.lookAt(scene.position);
            renderer.render(scene, camera);
        }
        window.requestAnimationFrame(animate, renderer.domElement);
    };
    animate(new Date().getTime());
    onmessage = function(ev) {
        paused = (ev.data == 'pause');
    };
			
    function render() {
	renderer.render( scene, camera );
	}

    } );
